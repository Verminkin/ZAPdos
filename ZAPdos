#!/usr/bin/env python3
import argparse
import os
import subprocess
import time
from urllib.parse import urlparse, quote
from tqdm import tqdm
import sys

ASCII_ART = """
â¬œâ¬›â¬›â¬›â¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬›â¬›ğŸŸ¨â¬›â¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬›ğŸŸ¨â¬›ğŸŸ¨â¬›â¬›ğŸŸ¨â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬›â¬›ğŸŸ¨â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬œâ¬œâ¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›ğŸŸ¨â¬›â¬œğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›â¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬›ğŸŸ§â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›ğŸŸ¨â¬›â¬›â¬›â¬›ğŸŸ¨â¬›â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›
â¬œâ¬œâ¬œâ¬œâ¬›ğŸŸ§ğŸŸ§ğŸŸ§â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨â¬›â¬›â¬›â¬›
â¬œâ¬œâ¬œâ¬›ğŸŸ§ğŸŸ§â¬›â¬›â¬œâ¬›ğŸŸ¨â¬›â¬›â¬›â¬œâ¬œâ¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œâ¬œ
â¬œâ¬œâ¬›ğŸŸ§â¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œ
â¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬›ğŸŸ¨â¬›â¬œâ¬›â¬›ğŸŸ¨ğŸŸ¨â¬›â¬œ
â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œâ¬›â¬›â¬›â¬œ
"""

def main():
    print(ASCII_ART)
    parser = argparse.ArgumentParser(
        description="ZAPdos: Quick scanner via ZAP's API (no zap-cli required).",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("target", nargs="?", help="URL cible ou fichier de cibles.")
    parser.add_argument("--api-url", default="http://127.0.0.1:8888", help="ZAP API base URL (dÃ©faut: http://127.0.0.1:8888).")       
    parser.add_argument("--type", choices=["web", "api"], default="web", help="Type de scan: web ou api (par dÃ©faut: web).")
    parser.add_argument("--creds", help="Identifiants (format user:pass) pour la cible (optionnel).")
    parser.add_argument("--api-key", help="ClÃ© API ZAP (optionnel).")
    parser.add_argument("--report-dir", default="ZAPdos_Thunder", help="Dossier de sortie pour les rapports (dÃ©faut: ZAPdos_Thunder).")
    args = parser.parse_args()

    if not args.target:
        parser.print_help()
        exit(0)

    os.makedirs(args.report_dir, exist_ok=True)

    if os.path.isfile(args.target):
        with open(args.target, "r") as f:
            targets = [line.strip() for line in f if line.strip()]
        # CrÃ©e un sous-dossier avec le nom du fichier
        target_file_basename = os.path.splitext(os.path.basename(args.target))[0]
        report_subdir = os.path.join(args.report_dir, target_file_basename)
        os.makedirs(report_subdir, exist_ok=True)
    else:
        targets = [args.target]
        report_subdir = args.report_dir

    for target in targets:
        print(f"[+] Scanning target: {target} ({args.type} mode)")
        run_zap_scan(target, report_subdir, args.api_url, args.creds, args.api_key)

    print("[âœ”] Tous les scans sont terminÃ©s.")

def zap_spider(target, zap_api_url, creds, api_key):
    print("[+] Spidering target:", target)
    spider_url = f"{zap_api_url}/JSON/spider/action/scan/?url={quote(target)}&maxChildren=0"
    call_curl(spider_url, creds, api_key)
    progress_bar(lambda: get_status(f"{zap_api_url}/JSON/spider/view/status/", creds, api_key), "Spidering")

def zap_active_scan(target, zap_api_url, creds, api_key):
    print("[+] Launching active scan for:", target)
    scan_url = f"{zap_api_url}/JSON/ascan/action/scan/?url={quote(target)}"
    call_curl(scan_url, creds, api_key)
    progress_bar(lambda: get_status(f"{zap_api_url}/JSON/ascan/view/status/", creds, api_key), "Active Scan")

def call_curl(url, creds, api_key):
    cmd = ["curl", "-s"]
    if api_key:
        url += f"&apikey={api_key}"
    if creds:
        cmd += ["-u", creds]
    cmd.append(url)
    subprocess.run(cmd, check=True)

def get_status(url, creds, api_key):
    if api_key:
        url += f"&apikey={api_key}"
    cmd = ["curl", "-s"]
    if creds:
        cmd += ["-u", creds]
    cmd.append(url)
    status = subprocess.check_output(cmd).decode()
    return int(status.split('"status":"')[1].split('"')[0])

def progress_bar(status_func, task_name):
    with tqdm(total=100, desc=task_name, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}%", colour="green") as pbar:
        last = 0
        while last < 100:
            status = status_func()
            pbar.update(status - last)
            last = status
            time.sleep(1)
        pbar.n = 100
        pbar.refresh()

def zap_generate_reports(report_basename, zap_api_url):
    print("[+] Generating HTML and JSON reports...")
    html_report_url = f"{zap_api_url}/OTHER/core/other/htmlreport/"
    json_report_url = f"{zap_api_url}/OTHER/core/other/jsonreport/"

    html_file = f"{report_basename}.html"
    json_file = f"{report_basename}.json"

    subprocess.run(["curl", "-s", html_report_url, "-o", html_file], check=True)
    subprocess.run(["curl", "-s", json_report_url, "-o", json_file], check=True)

    print(f"[âœ”] Reports saved to:\n  - {html_file}\n  - {json_file}\n")

def run_zap_scan(target, report_dir, zap_api_url, creds, api_key):
    parsed_url = urlparse(target)
    domain = parsed_url.netloc or parsed_url.path
    domain = domain.replace(":", "_").replace("/", "_")
    report_basename = os.path.join(report_dir, domain)

    zap_spider(target, zap_api_url, creds, api_key)
    zap_active_scan(target, zap_api_url, creds, api_key)
    zap_generate_reports(report_basename, zap_api_url)

if __name__ == "__main__":
    main()
