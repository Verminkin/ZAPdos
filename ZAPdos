#!/usr/bin/env python3
import argparse
import os
import subprocess
import time
from urllib.parse import urlparse, quote
from tqdm import tqdm
import sys

ASCII_ART = """
‚¨ú‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õüü®üü®‚¨õ‚¨õ‚¨õüü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨õüü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®‚¨õ‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õüü®‚¨õ‚¨õüü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨õ‚¨õüü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õÔøΩÔøΩüü®üü®üü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®‚¨õ‚¨õ‚¨õüü®üü®‚¨õ‚¨õüü®üü®‚¨õüü®üü®üü®üü®‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õüü®üü®‚¨õüü®üü®üü®‚¨õüü®üü®‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®üü®üü®üü®‚¨õ‚¨õüü®ÔøΩÔøΩüü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®‚¨õ‚¨ú‚¨õüü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®‚¨õ‚¨úüü®üü®üü®üü®‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüüßÔøΩÔøΩ‚¨õüü®üü®üü®üü®üü®‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õüü®‚¨õ‚¨õ‚¨õüü®üü®üü®üü®‚¨õ
‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüüßüüßüüß‚¨õüü®üü®üü®üü®üü®‚¨õ‚¨õüü®üü®‚¨õ‚¨õüü®üü®‚¨õ‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨õ
‚¨ú‚¨ú‚¨ú‚¨õüüßüüß‚¨õ‚¨õ‚¨ú‚¨õüü®‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú‚¨õüü®ÔøΩÔøΩüü®‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú‚¨ú
‚¨ú‚¨ú‚¨õüüß‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õüü®üü®‚¨õ‚¨õüü®üü®üü®‚¨õ‚¨ú‚¨ú
‚¨ú‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õüü®‚¨õ‚¨ú‚¨õ‚¨õüü®üü®‚¨õ‚¨ú
‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ‚¨ú
"""

def main():
    print(ASCII_ART)
    parser = argparse.ArgumentParser(
        description="ZAPdos: Quick scanner via ZAP's API (no zap-cli required).\n\n"
                    "Arguments:\n"
                    "  target        URL cible ou fichier de cibles (un par ligne).\n"
                    "  --api-url     URL de l'API ZAP (par d√©faut: http://127.0.0.1:8888).\n"
                    "  --type        Type de scan (web ou api). Par d√©faut : web.\n"
                    "  --creds       Identifiants pour la cible (format user:pass, optionnel).\n"
                    "  --api-key     Cl√© API de ZAP (optionnel).\n\n"
                    "‚ö†Ô∏è Si vous fermez le terminal, le scan s'arr√™tera !\n"
                    "üí° Pour lancer en arri√®re-plan (scan continue m√™me si SSH/terminal se ferme) :\n"
                    "  - Avec nohup : nohup ./ZAPdos target --type web > zapdos.log 2>&1 &\n"
                    "  - Avec screen/tmux : screen -S zap && ./ZAPdos target --type web",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("target", nargs="?", help="URL cible ou fichier de cibles.")
    parser.add_argument("--api-url", default="http://127.0.0.1:8888", help="ZAP API base URL (par d√©faut: http://127.0.0.1:8888).")
    parser.add_argument("--type", choices=["web", "api"], default="web", help="Type de scan: web ou api (par d√©faut: web).")
    parser.add_argument("--creds", help="Identifiants (format user:pass) pour la cible (optionnel).")
    parser.add_argument("--api-key", help="Cl√© API ZAP (optionnel).")

    args = parser.parse_args()
    if not args.target:
        parser.print_help()
        exit(0)

    report_dir = "ZAPdos_Thunder"
    os.makedirs(report_dir, exist_ok=True)

    if os.path.isfile(args.target):
        with open(args.target, "r") as f:
            targets = [line.strip() for line in f if line.strip()]
    else:
        targets = [args.target]

    for target in targets:
        print(f"[+] Scanning target: {target} ({args.type} mode)")
        run_zap_scan(target, report_dir, args.api_url, args.creds, args.api_key)

    print("[‚úî] Tous les scans sont termin√©s.")

def zap_spider(target, zap_api_url, creds, api_key):
    print("[+] Spidering target:", target)
    spider_url = f"{zap_api_url}/JSON/spider/action/scan/?url={quote(target)}&maxChildren=0"
    call_curl(spider_url, creds, api_key)
    progress_bar(lambda: get_status(f"{zap_api_url}/JSON/spider/view/status/", creds, api_key), "Spidering")

def zap_active_scan(target, zap_api_url, creds, api_key):
    print("[+] Launching active scan for:", target)
    scan_url = f"{zap_api_url}/JSON/ascan/action/scan/?url={quote(target)}"
    call_curl(scan_url, creds, api_key)
    progress_bar(lambda: get_status(f"{zap_api_url}/JSON/ascan/view/status/", creds, api_key), "Active Scan")

def call_curl(url, creds, api_key):
    cmd = ["curl", "-s"]
    if api_key:
        url += f"&apikey={api_key}"
    if creds:
        cmd += ["-u", creds]
    cmd.append(url)
    subprocess.run(cmd, check=True)

def get_status(url, creds, api_key):
    if api_key:
        url += f"&apikey={api_key}"
    cmd = ["curl", "-s"]
    if creds:
        cmd += ["-u", creds]
    cmd.append(url)
    status = subprocess.check_output(cmd).decode()
    return int(status.split('"status":"')[1].split('"')[0])

def progress_bar(status_func, task_name):
    with tqdm(total=100, desc=task_name, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}%", colour="green") as pbar:
        last = 0
        while last < 100:
            status = status_func()
            pbar.update(status - last)
            last = status
            time.sleep(1)
        pbar.n = 100
        pbar.refresh()

def zap_generate_report(report_filename, zap_api_url):
    print(f"[+] Generating report: {report_filename}")
    report_url = f"{zap_api_url}/OTHER/core/other/htmlreport/"
    subprocess.run(["curl", "-s", report_url, "-o", report_filename], check=True)

def run_zap_scan(target, report_dir, zap_api_url, creds, api_key):
    parsed_url = urlparse(target)
    domain = parsed_url.netloc or parsed_url.path
    report_filename = f"{report_dir}/{domain.replace('.', '_')}.html"

    zap_spider(target, zap_api_url, creds, api_key)
    zap_active_scan(target, zap_api_url, creds, api_key)
    zap_generate_report(report_filename, zap_api_url)
    print(f"[‚úî] Report saved to {report_filename}\n")

if __name__ == "__main__":
    main()
